package com.hmvsoluciones.saas.domain;

import static com.hmvsoluciones.saas.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PagoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoAllPropertiesEquals(Pago expected, Pago actual) {
        assertPagoAutoGeneratedPropertiesEquals(expected, actual);
        assertPagoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoAllUpdatablePropertiesEquals(Pago expected, Pago actual) {
        assertPagoUpdatableFieldsEquals(expected, actual);
        assertPagoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoAutoGeneratedPropertiesEquals(Pago expected, Pago actual) {
        assertThat(actual)
            .as("Verify Pago auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoUpdatableFieldsEquals(Pago expected, Pago actual) {
        assertThat(actual)
            .as("Verify Pago relevant properties")
            .satisfies(a -> assertThat(a.getFechaPago()).as("check fechaPago").isEqualTo(expected.getFechaPago()))
            .satisfies(a -> assertThat(a.getMonto()).as("check monto").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getMonto()))
            .satisfies(a -> assertThat(a.getMetodoPago()).as("check metodoPago").isEqualTo(expected.getMetodoPago()))
            .satisfies(a -> assertThat(a.getReferencia()).as("check referencia").isEqualTo(expected.getReferencia()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoUpdatableRelationshipsEquals(Pago expected, Pago actual) {
        assertThat(actual)
            .as("Verify Pago relationships")
            .satisfies(a -> assertThat(a.getSuscripcion()).as("check suscripcion").isEqualTo(expected.getSuscripcion()));
    }
}
