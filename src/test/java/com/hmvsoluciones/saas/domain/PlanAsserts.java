package com.hmvsoluciones.saas.domain;

import static com.hmvsoluciones.saas.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAllPropertiesEquals(Plan expected, Plan actual) {
        assertPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAllUpdatablePropertiesEquals(Plan expected, Plan actual) {
        assertPlanUpdatableFieldsEquals(expected, actual);
        assertPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAutoGeneratedPropertiesEquals(Plan expected, Plan actual) {
        assertThat(actual)
            .as("Verify Plan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanUpdatableFieldsEquals(Plan expected, Plan actual) {
        assertThat(actual)
            .as("Verify Plan relevant properties")
            .satisfies(a -> assertThat(a.getNombre()).as("check nombre").isEqualTo(expected.getNombre()))
            .satisfies(a -> assertThat(a.getDescripcion()).as("check descripcion").isEqualTo(expected.getDescripcion()))
            .satisfies(a ->
                assertThat(a.getPrecio()).as("check precio").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrecio())
            )
            .satisfies(a -> assertThat(a.getDuracionMeses()).as("check duracionMeses").isEqualTo(expected.getDuracionMeses()))
            .satisfies(a -> assertThat(a.getTipoPago()).as("check tipoPago").isEqualTo(expected.getTipoPago()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanUpdatableRelationshipsEquals(Plan expected, Plan actual) {
        assertThat(actual)
            .as("Verify Plan relationships")
            .satisfies(a -> assertThat(a.getProducto()).as("check producto").isEqualTo(expected.getProducto()));
    }
}
